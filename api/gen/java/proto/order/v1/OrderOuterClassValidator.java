// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/order/v1/order.proto

package order.v1;


@SuppressWarnings("all")
public class OrderOuterClassValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(order.v1.OrderOuterClass.Order.class)) return new OrderValidator();
		if (clazz.equals(order.v1.OrderOuterClass.healthyRequest.class)) return new HealthyRequestValidator();
		if (clazz.equals(order.v1.OrderOuterClass.healthyResponse.class)) return new HealthyResponseValidator();
		if (clazz.equals(order.v1.OrderOuterClass.CreateOrderRequest.class)) return new CreateOrderRequestValidator();
		if (clazz.equals(order.v1.OrderOuterClass.CreateOrderResponse.class)) return new CreateOrderResponseValidator();
		if (clazz.equals(order.v1.OrderOuterClass.GetOrderByIdRequest.class)) return new GetOrderByIdRequestValidator();
		if (clazz.equals(order.v1.OrderOuterClass.GetOrderByIdResponse.class)) return new GetOrderByIdResponseValidator();
		return null;
	}


/**
	 * Validates {@code Order} protobuf objects.
	 */
	public static class OrderValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.Order> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	
	

	public void assertValid(order.v1.OrderOuterClass.Order proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for OrderId

	// no validation rules for OrderNo

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Remark

	// no validation rules for PriceTotal

	// no validation rules for PricePay

	// no validation rules for PricePaid

	// no validation rules for Status

	// no validation rules for IsInvoice

	
			// Validate pay_time
			if (proto.hasPayTime()) index.validatorFor(proto.getPayTime()).assertValid(proto.getPayTime());
	
			// Validate add_time
			if (proto.hasAddTime()) index.validatorFor(proto.getAddTime()).assertValid(proto.getAddTime());
	
			// Validate update_time
			if (proto.hasUpdateTime()) index.validatorFor(proto.getUpdateTime()).assertValid(proto.getUpdateTime());
	
	
	}
}
/**
	 * Validates {@code HealthyRequest} protobuf objects.
	 */
	public static class HealthyRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.healthyRequest> {
	
	

	public void assertValid(order.v1.OrderOuterClass.healthyRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code HealthyResponse} protobuf objects.
	 */
	public static class HealthyResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.healthyResponse> {
		
	
	
	

	public void assertValid(order.v1.OrderOuterClass.healthyResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Status

	
	
	}
}
/**
	 * Validates {@code CreateOrderRequest} protobuf objects.
	 */
	public static class CreateOrderRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.CreateOrderRequest> {
		
	
	
	

	public void assertValid(order.v1.OrderOuterClass.CreateOrderRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate order
			if (proto.hasOrder()) index.validatorFor(proto.getOrder()).assertValid(proto.getOrder());
	
	
	}
}
/**
	 * Validates {@code CreateOrderResponse} protobuf objects.
	 */
	public static class CreateOrderResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.CreateOrderResponse> {
		
	
	
	

	public void assertValid(order.v1.OrderOuterClass.CreateOrderResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate order
			if (proto.hasOrder()) index.validatorFor(proto.getOrder()).assertValid(proto.getOrder());
	
	
	}
}
/**
	 * Validates {@code GetOrderByIdRequest} protobuf objects.
	 */
	public static class GetOrderByIdRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.GetOrderByIdRequest> {
		
	
		
	
	
	

	public void assertValid(order.v1.OrderOuterClass.GetOrderByIdRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for OrderId

	// no validation rules for UserId

	
	
	}
}
/**
	 * Validates {@code GetOrderByIdResponse} protobuf objects.
	 */
	public static class GetOrderByIdResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<order.v1.OrderOuterClass.GetOrderByIdResponse> {
		
	
	
	

	public void assertValid(order.v1.OrderOuterClass.GetOrderByIdResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate order
			if (proto.hasOrder()) index.validatorFor(proto.getOrder()).assertValid(proto.getOrder());
	
	
	}
}
}

