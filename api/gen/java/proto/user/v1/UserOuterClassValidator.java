// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/user/v1/user.proto

package user.v1;


@SuppressWarnings("all")
public class UserOuterClassValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(user.v1.UserOuterClass.User.class)) return new UserValidator();
		if (clazz.equals(user.v1.UserOuterClass.healthyRequest.class)) return new HealthyRequestValidator();
		if (clazz.equals(user.v1.UserOuterClass.healthyResponse.class)) return new HealthyResponseValidator();
		if (clazz.equals(user.v1.UserOuterClass.ListUsersByIDsRequest.class)) return new ListUsersByIDsRequestValidator();
		if (clazz.equals(user.v1.UserOuterClass.ListUsersByIDsResponse.class)) return new ListUsersByIDsResponseValidator();
		if (clazz.equals(user.v1.UserOuterClass.GetUserRequest.class)) return new GetUserRequestValidator();
		if (clazz.equals(user.v1.UserOuterClass.GetUserResponse.class)) return new GetUserResponseValidator();
		if (clazz.equals(user.v1.UserOuterClass.CreateUserRequest.class)) return new CreateUserRequestValidator();
		if (clazz.equals(user.v1.UserOuterClass.CreateUserResponse.class)) return new CreateUserResponseValidator();
		if (clazz.equals(user.v1.UserOuterClass.UpdateUserRequest.class)) return new UpdateUserRequestValidator();
		if (clazz.equals(user.v1.UserOuterClass.UpdateUserResponse.class)) return new UpdateUserResponseValidator();
		if (clazz.equals(user.v1.UserOuterClass.DeleteUserRequest.class)) return new DeleteUserRequestValidator();
		if (clazz.equals(user.v1.UserOuterClass.DeleteUserResponse.class)) return new DeleteUserResponseValidator();
		return null;
	}


/**
	 * Validates {@code User} protobuf objects.
	 */
	public static class UserValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.User> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.User proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for UserId

	// no validation rules for UserNo

	// no validation rules for UserName

	// no validation rules for Avatar

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for Unionid

	// no validation rules for Openid

	// no validation rules for MiniappOpenid

	
			// Validate add_time
			if (proto.hasAddTime()) index.validatorFor(proto.getAddTime()).assertValid(proto.getAddTime());
	
			// Validate update_time
			if (proto.hasUpdateTime()) index.validatorFor(proto.getUpdateTime()).assertValid(proto.getUpdateTime());
	// no validation rules for IsDelete

	
	
	}
}
/**
	 * Validates {@code HealthyRequest} protobuf objects.
	 */
	public static class HealthyRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.healthyRequest> {
	
	

	public void assertValid(user.v1.UserOuterClass.healthyRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code HealthyResponse} protobuf objects.
	 */
	public static class HealthyResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.healthyResponse> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.healthyResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Status

	
	
	}
}
/**
	 * Validates {@code ListUsersByIDsRequest} protobuf objects.
	 */
	public static class ListUsersByIDsRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.ListUsersByIDsRequest> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.ListUsersByIDsRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getIdsList(), item -> {
				// no validation rules for Ids

			});
	
	
	}
}
/**
	 * Validates {@code ListUsersByIDsResponse} protobuf objects.
	 */
	public static class ListUsersByIDsResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.ListUsersByIDsResponse> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.ListUsersByIDsResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getUsersList(), item -> {
				
			// Validate users
			if (true) index.validatorFor(item).assertValid(item);
			});
	
	
	}
}
/**
	 * Validates {@code GetUserRequest} protobuf objects.
	 */
	public static class GetUserRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.GetUserRequest> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.GetUserRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for UserId

	
	
	}
}
/**
	 * Validates {@code GetUserResponse} protobuf objects.
	 */
	public static class GetUserResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.GetUserResponse> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.GetUserResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate user
			if (proto.hasUser()) index.validatorFor(proto.getUser()).assertValid(proto.getUser());
	
	
	}
}
/**
	 * Validates {@code CreateUserRequest} protobuf objects.
	 */
	public static class CreateUserRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.CreateUserRequest> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.CreateUserRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate user
			if (proto.hasUser()) index.validatorFor(proto.getUser()).assertValid(proto.getUser());
	
	
	}
}
/**
	 * Validates {@code CreateUserResponse} protobuf objects.
	 */
	public static class CreateUserResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.CreateUserResponse> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.CreateUserResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate user
			if (proto.hasUser()) index.validatorFor(proto.getUser()).assertValid(proto.getUser());
	
	
	}
}
/**
	 * Validates {@code UpdateUserRequest} protobuf objects.
	 */
	public static class UpdateUserRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.UpdateUserRequest> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.UpdateUserRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate user
			if (proto.hasUser()) index.validatorFor(proto.getUser()).assertValid(proto.getUser());
	
	
	}
}
/**
	 * Validates {@code UpdateUserResponse} protobuf objects.
	 */
	public static class UpdateUserResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.UpdateUserResponse> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.UpdateUserResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Success

	
	
	}
}
/**
	 * Validates {@code DeleteUserRequest} protobuf objects.
	 */
	public static class DeleteUserRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.DeleteUserRequest> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.DeleteUserRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Id

	
	
	}
}
/**
	 * Validates {@code DeleteUserResponse} protobuf objects.
	 */
	public static class DeleteUserResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<user.v1.UserOuterClass.DeleteUserResponse> {
		
	
	
	

	public void assertValid(user.v1.UserOuterClass.DeleteUserResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Success

	
	
	}
}
}

